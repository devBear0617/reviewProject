<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.review.dao.BoardDAO">
	
	<resultMap id="Board" type="BoardVO">
		<id property="board_num" column="board_num" />
		<result property="board_title" column="board_title" />
		<result property="board_content" column="board_content" />
		<result property="board_date" column="board_date" />
		<result property="member_id" column="member_id" />
		<result property="lemon_grade" column="lemon_grade" />
		<result property="recommend" column="recommend" />
		<result property="thumbnail" column="thumbnail"/>
		<result property="board_up_date" column="board_up_date" />
		<result property="board_readcount" column="board_readcount" />
		
		<association property="memberVO" column="member_id" select="getMember" />
		<association property="b_movieVO" column="board_num" select="getB_Movie" />
		<association property="gradeVO" column="board_num" select="getGrade" />
		<association property="b_tvVO" column="board_num" select="getB_Tv" />
		<association property="hashtagVO" column="board_num" select="getHashtag" />
		
		<collection property="likeList" column="board_num" select="getLike" />
		<collection property="replyList" column="board_num" select="getReply" />	
	</resultMap>
	
 	<resultMap id="Board_movie" type="BoardVO">
		<id property="board_num" column="board_num" />
		<result property="board_title" column="board_title" />
		<result property="board_date" column="board_date" />
		<result property="member_id" column="member_id" />
		
		<association property="memberVO" column="member_id" select="getMember" />
		<association property="b_movieVO" column="board_num" select="getB_Movie" />
		<association property="memberVO" column="member_id" select="getMember" />
	</resultMap>
	
	<resultMap id="Movie_Reply" type="ReplyVO">
		<id property="reply_num" column="reply_num" />
		<result property="board_num" column="board_num" />
		<result property="member_id" column="member_id" />
		<result property="reply_content" column="reply_content" />
		<result property="reply_date" column="reply_date" />
		<result property="reply_up_date" column="reply_up_date" />
		
		<association property="b_movieVO" column="board_num" select="getB_Movie" />
	</resultMap>
	
	<resultMap id="Movie_LikeIt" type="LikeItVO">
		<result property="board_num" column="board_num" />
		<result property="member_id" column="member_id" />
		<result property="likeit" column="liekit" />
	</resultMap>
	

	<!-- ____likeCheck______________________________________________________________________ -->
	<select id="likeCheck" parameterType="map" resultType="int">
		SELECT NVL(max(likeit), 0)
		FROM likeit
		WHERE board_num = #{board_num}
		AND member_id = #{member_id}
	</select>
	
	<!-- ____likeItMinus______________________________________________________________________ -->
	<delete id="likeItMinus" parameterType="LikeItVO">
		DELETE FROM likeit
		WHERE board_num = #{board_num}
		AND member_id = #{member_id}
	</delete>
	
	<!-- ____likeItPlus______________________________________________________________________ -->
	<insert id="likeItPlus" parameterType="LikeItVO">
		INSERT INTO likeit(board_num, member_id, likeit)
		VALUES(#{board_num}, #{member_id}, '1')
	</insert>
	
	<!-- ____Jsoup getContent__________________________________________-->
	<select id="getContent" parameterType="int" resultType="String">
		SELECT board_content
		FROM board
		WHERE board_num = #{board_num}
	</select>
	
	<!-- ____리플 추가______________________________________________________________________ -->
	<insert id="insertReply" parameterType="ReplyVO">
		INSERT INTO reply(board_num, member_id, reply_content)
		VALUES(#{board_num}, #{member_id}, #{reply_content})
	</insert>
	<!-- ____리플 수정______________________________________________________________________ -->
	<update id="updateReply" parameterType="ReplyVO">
		UPDATE reply SET
			reply_content = #{reply_content},
			reply_up_date = sysdate
		WHERE reply_num = #{reply_num}
	</update>
	<!-- ____리플 삭제______________________________________________________________________ -->
	<delete id="deleteReply" parameterType="int">
		DELETE FROM reply
		WHERE reply_num = #{reply_num}
	</delete>
	
	<!-- 게시글 호출______________________________________________________________________ -->
	<select id="getBoardById" parameterType="int" resultMap="Board">
		SELECT *
		FROM board
		WHERE board_num = #{board_num}
	</select>
	<select id="getMovieInfo" parameterType="String" resultType="MovieApiVO">
		SELECT *
		FROM movie_info
		WHERE movie_nm = #{movie_nm}
	</select>
	<select id="replyCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM reply
		WHERE board_num = #{board_num}
	</select>
	<select id="replyList" parameterType="int" resultType="ReplyVO">
		SELECT *
		FROM reply
		WHERE board_num = #{board_num}
		ORDER BY reply_num ASC
	</select>
	<select id="likeCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM likeit
		WHERE board_num = #{board_num}
	</select>
	<!-- plusReadCount -->
	<update id="plusReadCount" parameterType="int">
		UPDATE board SET
			board_readcount = board_readcount + 1
		WHERE board_num = #{board_num}
	</update>
	
	
	<!-- ____게시판 호출______________________________________________________________________ -->
	<select id="getBoardList" resultMap="Board">
		SELECT *
		FROM board
	</select>	    
       
    <!-- best_content 출력-->
	<select id="getMovieBoardList_Best" parameterType="Board_MovieVO" resultMap="Board_movie">
		
	SELECT bbb.*, (SELECT COUNT(*) FROM likeit WHERE board_num = bbb.board_num) as likeit_count, 
				  (SELECT COUNT(*) FROM reply WHERE board_num = bbb.board_num) as reply_count	
	FROM ( SELECT bmv.*, m.MEMBER_EMAIL, m.MEMBER_PIC  
		   FROM ( SELECT rownum as rnum, bb.*
		          FROM ( SELECT b.*, mv.b_movie_num, mv.movie_nm 
                         FROM board b, board_movie mv  
                         WHERE b.board_num = mv.board_num
                         <include refid = "movie_name"></include>
                         <![CDATA[AND (SELECT COUNT(*) FROM likeit WHERE board_num = b.board_num) > 0 ]]> 
                         ORDER BY  (SELECT COUNT(*) FROM likeit WHERE board_num = b.board_num) DESC, b.board_num DESC 
                         ) bb                             
          <![CDATA[WHERE rownum <= 3]]> 
     	          )bmv ,  member m 
		   WHERE bmv.member_id = m.member_id
		   AND <![CDATA[bmv.rnum > 0 ]]>  ORDER BY rnum
	     ) bbb
    </select> 
               
    <!-- content List 출력 및  정렬  -->
	<select id="getMovieBoardList" parameterType="Board_MovieVO" resultMap="Board_movie">
		
	SELECT bbb.*, (SELECT COUNT(*) FROM likeit WHERE board_num = bbb.board_num) as likeit_count, 
				  (SELECT COUNT(*) FROM reply WHERE board_num = bbb.board_num) as reply_count	
	FROM ( SELECT bmv.*, m.MEMBER_EMAIL, m.MEMBER_PIC  
		   FROM ( SELECT rownum as rnum, bb.*
		          FROM ( SELECT b.*, mv.b_movie_num, mv.movie_nm 
                         FROM board b, board_movie mv  
                         WHERE b.board_num = mv.board_num
                         <include refid = "movie_name"></include> ORDER BY <include refid = "sort"></include> 
                        ) bb                             
          <![CDATA[WHERE rownum <= #{end_content}]]> 
     	          )bmv ,  member m 
		   WHERE bmv.member_id = m.member_id
		   AND <![CDATA[bmv.rnum > ]]> #{start_content} ORDER BY rnum
	     ) bbb
    </select>            
    
    <!-- 정렬 조건  include  -->   
    <sql id = "sort">
    	<choose>
    		<when test = "sort_id == 'sort_time'">
    		  b.board_num DESC
    		</when>
    		<when test = "sort_id == 'sort_grade'">
    		  b.lemon_grade DESC, b.board_num DESC
    		</when>
    		<otherwise>
    		  (SELECT COUNT(*) FROM likeit WHERE board_num = b.board_num) DESC, b.board_num DESC 
    		</otherwise>   	
    	</choose>    
    </sql>  
    <!-- movie_name 있을때, 없을때 조건  include  -->   
    <sql id = "movie_name">
    	<choose>
    		<when test = "movie_nm">    		
    			AND mv.movie_nm = #{movie_nm}    			
    		</when>    		
    	</choose>
    </sql>  	    
	
    <select id="getMovieBoardCount" resultType="int">
		SELECT COUNT(*)
		FROM board_movie
	</select>

	
	<select id="getMovieBoardReplyList" resultMap="Movie_Reply">
		SELECT *
		FROM board_movie m, reply r
		WHERE m.board_num = r.board_num
	</select>
	<select id="getMovieBoardLikeList" resultMap="Movie_LikeIt">
		SELECT *
		FROM board_movie m, likeit l
		WHERE m.board_num = l.board_num
	</select>
	
	<select id="getTvBoardList" resultMap="Board">
		SELECT *
		FROM board_tv t, board b
		WHERE t.board_num = b.board_num		
	</select>


	<!-- ____게시글 추가______________________________________________________________________ -->
	<insert id="insertMovie" parameterType="BoardVO">
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT bnum_seq.nextval AS board_num FROM DUAL
		</selectKey>
		INSERT INTO board(board_num, board_title, board_content, member_id, lemon_grade, recommend)
		VALUES(#{board_num}, #{board_title}, #{board_content,jdbcType=CLOB}, #{member_id}, #{lemon_grade}, #{recommend})
	</insert>
	<insert id="insertGrade" parameterType="GradeVO">
		INSERT INTO grade(board_num, grade_name1, grade1, grade_name2, grade2, grade_name3, grade3, grade_name4, grade4)
		VALUES(#{board_num}, #{grade_name1}, #{grade1}, #{grade_name2}, #{grade2}, #{grade_name3}, #{grade3}, #{grade_name4}, #{grade4})
	</insert>
	<insert id="insertB_movie" parameterType="Board_MovieVO">
		INSERT INTO board_movie(board_num, movie_nm)
		VALUES(#{board_num}, #{movie_nm})
	</insert>
	<insert id="insertHashtag" parameterType="HashtagVO">
		INSERT INTO hashtag(board_num, hashtag1, hashtag2, hashtag3, hashtag4, hashtag5, hashtag6)
		VALUES(#{board_num}, #{hashtag1}, #{hashtag2}, #{hashtag3}, #{hashtag4}, #{hashtag5}, #{hashtag6})
	</insert>
	<insert id="insertMovieInfo" parameterType="MovieApiVO">
		INSERT INTO movie_info
		VALUES(#{movie_nm}, to_date(#{open_dt,jdbcType=VARCHAR}, 'YYYYMMDD'), #{genre,jdbcType=VARCHAR}, #{nation,jdbcType=VARCHAR}, #{director,jdbcType=VARCHAR}, #{actor,jdbcType=VARCHAR}, #{poster,jdbcType=VARCHAR})
	</insert>
	<update id="insertThumbnail" parameterType="BoardVO">
		UPDATE board SET
			thumbnail = #{thumbnail}
		WHERE board_num = #{board_num}
	</update>

	<!-- ____게시글 수정______________________________________________________________________ -->
	<!-- update -->
	<update id="updateMovie" parameterType="BoardVO">
		UPDATE board SET
			board_title = #{board_title},
			board_content = #{board_content,jdbcType=CLOB},
			lemon_grade = #{lemon_grade},
			recommend = #{recommend},
			board_up_date = sysdate
		WHERE board_num = #{board_num}
	</update>
	<update id="updateGrade" parameterType="GradeVO">
		UPDATE grade SET
			grade_name1 = #{grade_name1},
			grade1 = #{grade1},
			grade_name2 = #{grade_name2},
			grade2 = #{grade2},
			grade_name3 = #{grade_name3},
			grade3 = #{grade3},
			grade_name4 = #{grade_name4},
			grade4 = #{grade4}
		WHERE board_num = #{board_num}
	</update>
	<update id="updateB_movie" parameterType="Board_MovieVO">
		UPDATE board_movie SET
			movie_nm = #{movie_nm}
		WHERE board_num = #{board_num}
	</update>
	<update id="updateHashtag" parameterType="HashtagVO">
		UPDATE hashtag SET
			hashtag1 = #{hashtag1},
			hashtag2 = #{hashtag2},
			hashtag3 = #{hashtag3},
			hashtag4 = #{hashtag4},
			hashtag5 = #{hashtag5},
			hashtag6 = #{hashtag6}
		WHERE board_num = #{board_num}
	</update>
	
	<!-- ____게시글 삭제______________________________________________________________________ -->
	<delete id="delete_Reply" parameterType="ReplyVO">
		DELETE FROM reply
		WHERE board_num = #{board_num}
	</delete>
	<delete id="delete_Like" parameterType="LikeItVO">
		DELETE FROM likeit
		WHERE board_num = #{board_num}
		AND likeit = '1'
	</delete>
	<delete id="deleteHashtag" parameterType="HashtagVO">
		DELETE FROM hashtag
		WHERE board_num = #{board_num}
	</delete>
	<delete id="deleteB_movie" parameterType="Board_MovieVO">
		DELETE FROM board_movie
		WHERE board_num = #{board_num}
	</delete>
	<delete id="deleteGrade" parameterType="GradeVO">
		DELETE FROM grade
		WHERE board_num = #{board_num}
	</delete>
	<delete id="deleteMovie" parameterType="BoardVO">
		DELETE FROM board
		WHERE board_num = #{board_num}
	</delete>
	
	
	
	
	<!-- ____resultMap 조인______________________________________________________________________ -->
	<select id="getMember" parameterType="String" resultType="MemberVO">
		SELECT *
		FROM member
		WHERE member_id = #{member_id}
	</select>
	<select id="getB_Movie" parameterType="int" resultType="Board_MovieVO">
		SELECT *
		FROM board_movie
		WHERE board_num = #{board_num}
	</select>
	<select id="getGrade" parameterType="int" resultType="GradeVO">
		SELECT *
		FROM grade
		WHERE board_num = #{board_num}
	</select>
	<select id="getB_Tv" parameterType="int" resultType="Board_TvVO">
		SELECT *
		FROM board_tv
		WHERE board_num = #{board_num}
	</select>
	<select id="getHashtag" parameterType="int" resultType="HashtagVO">
		SELECT *
		FROM hashtag
		WHERE board_num = #{board_num}
	</select>
	
	<select id="getReply" resultType="ReplyVO">
		SELECT *
		FROM reply
		WHERE board_num = #{board_num}
	</select>
	<select id="getLike" resultType="LikeItVO">
		SELECT *
		FROM likeit
		WHERE board_num = #{board_num}
	</select>

	<select id="getCategory" parameterType="CategoryVO" resultType="CategoryVO">
		SELECT *
		FROM category
		WHERE ca_type = #{ca_type}		
	</select>
</mapper>